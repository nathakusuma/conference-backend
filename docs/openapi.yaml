openapi: 3.1.0
info:
  title: Astungkara
  version: '1.0.0'

servers:
  - url: "https://astungkara.nathakusuma.com/api/v1"
    description: Production server
  - url: "http://localhost/api/v1"
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRole:
      type: string
      enum: [ user, admin, event_coordinator ]

    User:
      type: object
      properties:
        id:
          type: [ "string", "null" ]
          format: uuid
        name:
          type: [ "string", "null" ]
          examples:
            - "Natha Kusuma"
        email:
          type: [ "string", "null" ]
          format: email
        role:
          oneOf:
            - $ref: '#/components/schemas/UserRole'
            - type: "null"
          examples:
            - "user"
        bio:
          type: [ "string", "null" ]
          examples:
            - "Seorang programmer pemula yang sedang belajar backend"
        created_at:
          type: [ "string", "null" ]
          format: date-time
        updated_at:
          type: [ "string", "null" ]
          format: date-time

    ErrorResponse:
      type: object
      properties:
        message:
          type: [ "string", "null" ]
          description: Error message
        detail:
          type: [ "object", "null" ]
          description: Additional error details
        error_code:
          type: [ "string", "null" ]
          description: Error code identifier
        trace_id:
          type: [ "string", "null" ]
          format: uuid
          description: Unique trace ID for error tracking

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "There are invalid fields in your request. Please check and try again"
            detail:
              - email:
                  tag: "required"
                  param: ""
                  translation: "Email is a required field"
            error_code: "VALIDATION_ERROR"

    AuthenticationError:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            noBearerToken:
              summary: No Bearer Token
              value:
                message: "You're not logged in. Please login first."
                error_code: "NO_BEARER_TOKEN"
            invalidBearerToken:
              summary: Invalid Bearer Token
              value:
                message: "Your auth session is invalid. Please renew your auth session."
                error_code: "INVALID_BEARER_TOKEN"

    InvalidRefreshToken:
      description: Invalid refresh token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Auth session is invalid. Please login again."
            error_code: "INVALID_REFRESH_TOKEN"

    InvalidOTP:
      description: Invalid OTP
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Invalid OTP. Please try again or request a new OTP."
            error_code: "INVALID_OTP"

    CredentialsNotMatch:
      description: Invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Credentials do not match. Please try again."
            error_code: "CREDENTIALS_NOT_MATCH"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Data not found."
            error_code: "NOT_FOUND"

    FailParseRequest:
      description: Failed to parse request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Failed to parse request. Please check your request format."
            error_code: "FAIL_PARSE_REQUEST"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Something went wrong in our server. Please try again later."
            error_code: "INTERNAL_SERVER_ERROR"
            trace_id: "652e0a03-1c0a-404a-ac47-685d7ecb22d8"

    ForbiddenRole:
      description: Forbidden - User role not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "You're not allowed to access this resource."
            error_code: "FORBIDDEN_ROLE"

    EmailAlreadyRegistered:
      description: Conflict - Email already registered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Email already registered. Please login or use another email."
            error_code: "EMAIL_ALREADY_REGISTERED"

tags:
  - name: Auth
    description: Authentication and authorization operations
  - name: Users
    description: User management operations

paths:
  /auth/register/otp:
    post:
      tags:
        - Auth
      summary: Request OTP Register User
      operationId: requestOTPRegisterUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 320
      responses:
        '204':
          description: Success - OTP sent successfully
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '409':
          $ref: '#/components/responses/EmailAlreadyRegistered'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register/otp/check:
    post:
      tags:
        - Auth
      summary: Check OTP Register User
      operationId: checkOTPRegisterUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
                  examples:
                    - "123456"
      responses:
        '204':
          description: Success - OTP verification successful
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/InvalidOTP'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - name
                - password
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 320
                otp:
                  type: string
                  examples:
                    - "123456"
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
                  examples:
                    - "Natha Kusuma"
                password:
                  type: string
                  minLength: 8
                  maxLength: 72
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - refresh_token
                  - user
                properties:
                  access_token:
                    type: string
                    examples:
                      - "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token:
                    type: string
                    examples:
                      - "zvXQxgxN2pQD4kci41lhnkwfXKAXtt2l"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/InvalidOTP'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login User
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - refresh_token
                  - user
                properties:
                  access_token:
                    type: string
                    examples:
                      - "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token:
                    type: string
                    examples:
                      - "zvXQxgxN2pQD4kci41lhnkwfXKAXtt2l"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/CredentialsNotMatch'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "User not found. Please register first."
                error_code: "NOT_FOUND"
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token
      operationId: refreshAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  examples:
                    - "zvXQxgxN2pQD4kci41lhnkwfXKAXtt2l"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - refresh_token
                  - user
                properties:
                  access_token:
                    type: string
                    examples:
                      - "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token:
                    type: string
                    examples:
                      - "zvXQxgxN2pQD4kci41lhnkwfXKAXtt2l"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/InvalidRefreshToken'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout User
      operationId: logoutUser
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Success - User logged out successfully
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/reset-password/otp:
    post:
      tags:
        - Auth
      summary: Request OTP Reset Password
      operationId: requestOTPResetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '204':
          description: Success - OTP sent successfully
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - new_password
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
                  examples:
                    - "123456"
                new_password:
                  type: string
                  minLength: 8
                  maxLength: 72
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - refresh_token
                  - user
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/InvalidOTP'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    post:
      tags:
        - Users
      summary: Create New User
      description: Creates a new user. Only available to users with admin role.
      operationId: createUser
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  pattern: "^[\\x00-\\x7F]*$"  # ASCII characters only
                  examples:
                    - "Mas Event Coordinator 1"
                email:
                  type: string
                  format: email
                  maxLength: 320
                password:
                  type: string
                  minLength: 8
                  maxLength: 72
                  pattern: "^[\\x00-\\x7F]*$"  # ASCII characters only
                role:
                  type: string
                  enum: [ event_coordinator, user ]
                  examples:
                    - "event_coordinator"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        format: uuid
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenRole'
        '409':
          $ref: '#/components/responses/EmailAlreadyRegistered'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - Users
      summary: Get Current User Profile
      operationId: getUserMe
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Users
      summary: Update User Profile
      operationId: updateUserMe
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
                  examples:
                    - "Natha Kusuma :)"
                bio:
                  type: string
                  maxLength: 500
                  examples:
                    - "Seorang programmer pemula yang sedang belajar backend"
      responses:
        '204':
          description: Success - User profile updated successfully
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get User by ID
      operationId: getUserById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Users
      summary: Delete User
      description: Deletes a user. Only available to users with admin role.
      operationId: deleteUser
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - User deleted successfully
        '400':
          $ref: '#/components/responses/FailParseRequest'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
