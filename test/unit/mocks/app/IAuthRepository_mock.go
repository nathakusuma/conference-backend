// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/nathakusuma/astungkara/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIAuthRepository is an autogenerated mock type for the IAuthRepository type
type MockIAuthRepository struct {
	mock.Mock
}

type MockIAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthRepository) EXPECT() *MockIAuthRepository_Expecter {
	return &MockIAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateAuthSession provides a mock function with given fields: ctx, authSession
func (_m *MockIAuthRepository) CreateAuthSession(ctx context.Context, authSession *entity.AuthSession) error {
	ret := _m.Called(ctx, authSession)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AuthSession) error); ok {
		r0 = rf(ctx, authSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_CreateAuthSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthSession'
type MockIAuthRepository_CreateAuthSession_Call struct {
	*mock.Call
}

// CreateAuthSession is a helper method to define mock.On call
//   - ctx context.Context
//   - authSession *entity.AuthSession
func (_e *MockIAuthRepository_Expecter) CreateAuthSession(ctx interface{}, authSession interface{}) *MockIAuthRepository_CreateAuthSession_Call {
	return &MockIAuthRepository_CreateAuthSession_Call{Call: _e.mock.On("CreateAuthSession", ctx, authSession)}
}

func (_c *MockIAuthRepository_CreateAuthSession_Call) Run(run func(ctx context.Context, authSession *entity.AuthSession)) *MockIAuthRepository_CreateAuthSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.AuthSession))
	})
	return _c
}

func (_c *MockIAuthRepository_CreateAuthSession_Call) Return(_a0 error) *MockIAuthRepository_CreateAuthSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_CreateAuthSession_Call) RunAndReturn(run func(context.Context, *entity.AuthSession) error) *MockIAuthRepository_CreateAuthSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthSession provides a mock function with given fields: ctx, userID
func (_m *MockIAuthRepository) DeleteAuthSession(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_DeleteAuthSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthSession'
type MockIAuthRepository_DeleteAuthSession_Call struct {
	*mock.Call
}

// DeleteAuthSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockIAuthRepository_Expecter) DeleteAuthSession(ctx interface{}, userID interface{}) *MockIAuthRepository_DeleteAuthSession_Call {
	return &MockIAuthRepository_DeleteAuthSession_Call{Call: _e.mock.On("DeleteAuthSession", ctx, userID)}
}

func (_c *MockIAuthRepository_DeleteAuthSession_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockIAuthRepository_DeleteAuthSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIAuthRepository_DeleteAuthSession_Call) Return(_a0 error) *MockIAuthRepository_DeleteAuthSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_DeleteAuthSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIAuthRepository_DeleteAuthSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOTPRegisterUser provides a mock function with given fields: ctx, email
func (_m *MockIAuthRepository) DeleteOTPRegisterUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOTPRegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_DeleteOTPRegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOTPRegisterUser'
type MockIAuthRepository_DeleteOTPRegisterUser_Call struct {
	*mock.Call
}

// DeleteOTPRegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthRepository_Expecter) DeleteOTPRegisterUser(ctx interface{}, email interface{}) *MockIAuthRepository_DeleteOTPRegisterUser_Call {
	return &MockIAuthRepository_DeleteOTPRegisterUser_Call{Call: _e.mock.On("DeleteOTPRegisterUser", ctx, email)}
}

func (_c *MockIAuthRepository_DeleteOTPRegisterUser_Call) Run(run func(ctx context.Context, email string)) *MockIAuthRepository_DeleteOTPRegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_DeleteOTPRegisterUser_Call) Return(_a0 error) *MockIAuthRepository_DeleteOTPRegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_DeleteOTPRegisterUser_Call) RunAndReturn(run func(context.Context, string) error) *MockIAuthRepository_DeleteOTPRegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOTPResetPassword provides a mock function with given fields: ctx, email
func (_m *MockIAuthRepository) DeleteOTPResetPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOTPResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_DeleteOTPResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOTPResetPassword'
type MockIAuthRepository_DeleteOTPResetPassword_Call struct {
	*mock.Call
}

// DeleteOTPResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthRepository_Expecter) DeleteOTPResetPassword(ctx interface{}, email interface{}) *MockIAuthRepository_DeleteOTPResetPassword_Call {
	return &MockIAuthRepository_DeleteOTPResetPassword_Call{Call: _e.mock.On("DeleteOTPResetPassword", ctx, email)}
}

func (_c *MockIAuthRepository_DeleteOTPResetPassword_Call) Run(run func(ctx context.Context, email string)) *MockIAuthRepository_DeleteOTPResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_DeleteOTPResetPassword_Call) Return(_a0 error) *MockIAuthRepository_DeleteOTPResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_DeleteOTPResetPassword_Call) RunAndReturn(run func(context.Context, string) error) *MockIAuthRepository_DeleteOTPResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthSessionByToken provides a mock function with given fields: ctx, token
func (_m *MockIAuthRepository) GetAuthSessionByToken(ctx context.Context, token string) (*entity.AuthSession, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthSessionByToken")
	}

	var r0 *entity.AuthSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.AuthSession, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.AuthSession); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AuthSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_GetAuthSessionByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthSessionByToken'
type MockIAuthRepository_GetAuthSessionByToken_Call struct {
	*mock.Call
}

// GetAuthSessionByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockIAuthRepository_Expecter) GetAuthSessionByToken(ctx interface{}, token interface{}) *MockIAuthRepository_GetAuthSessionByToken_Call {
	return &MockIAuthRepository_GetAuthSessionByToken_Call{Call: _e.mock.On("GetAuthSessionByToken", ctx, token)}
}

func (_c *MockIAuthRepository_GetAuthSessionByToken_Call) Run(run func(ctx context.Context, token string)) *MockIAuthRepository_GetAuthSessionByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_GetAuthSessionByToken_Call) Return(_a0 *entity.AuthSession, _a1 error) *MockIAuthRepository_GetAuthSessionByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetAuthSessionByToken_Call) RunAndReturn(run func(context.Context, string) (*entity.AuthSession, error)) *MockIAuthRepository_GetAuthSessionByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetOTPRegisterUser provides a mock function with given fields: ctx, email
func (_m *MockIAuthRepository) GetOTPRegisterUser(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOTPRegisterUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_GetOTPRegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOTPRegisterUser'
type MockIAuthRepository_GetOTPRegisterUser_Call struct {
	*mock.Call
}

// GetOTPRegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthRepository_Expecter) GetOTPRegisterUser(ctx interface{}, email interface{}) *MockIAuthRepository_GetOTPRegisterUser_Call {
	return &MockIAuthRepository_GetOTPRegisterUser_Call{Call: _e.mock.On("GetOTPRegisterUser", ctx, email)}
}

func (_c *MockIAuthRepository_GetOTPRegisterUser_Call) Run(run func(ctx context.Context, email string)) *MockIAuthRepository_GetOTPRegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_GetOTPRegisterUser_Call) Return(_a0 string, _a1 error) *MockIAuthRepository_GetOTPRegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetOTPRegisterUser_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockIAuthRepository_GetOTPRegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOTPResetPassword provides a mock function with given fields: ctx, email
func (_m *MockIAuthRepository) GetOTPResetPassword(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOTPResetPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_GetOTPResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOTPResetPassword'
type MockIAuthRepository_GetOTPResetPassword_Call struct {
	*mock.Call
}

// GetOTPResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthRepository_Expecter) GetOTPResetPassword(ctx interface{}, email interface{}) *MockIAuthRepository_GetOTPResetPassword_Call {
	return &MockIAuthRepository_GetOTPResetPassword_Call{Call: _e.mock.On("GetOTPResetPassword", ctx, email)}
}

func (_c *MockIAuthRepository_GetOTPResetPassword_Call) Run(run func(ctx context.Context, email string)) *MockIAuthRepository_GetOTPResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_GetOTPResetPassword_Call) Return(_a0 string, _a1 error) *MockIAuthRepository_GetOTPResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetOTPResetPassword_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockIAuthRepository_GetOTPResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// SetOTPRegisterUser provides a mock function with given fields: ctx, email, otp
func (_m *MockIAuthRepository) SetOTPRegisterUser(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	if len(ret) == 0 {
		panic("no return value specified for SetOTPRegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_SetOTPRegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOTPRegisterUser'
type MockIAuthRepository_SetOTPRegisterUser_Call struct {
	*mock.Call
}

// SetOTPRegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - otp string
func (_e *MockIAuthRepository_Expecter) SetOTPRegisterUser(ctx interface{}, email interface{}, otp interface{}) *MockIAuthRepository_SetOTPRegisterUser_Call {
	return &MockIAuthRepository_SetOTPRegisterUser_Call{Call: _e.mock.On("SetOTPRegisterUser", ctx, email, otp)}
}

func (_c *MockIAuthRepository_SetOTPRegisterUser_Call) Run(run func(ctx context.Context, email string, otp string)) *MockIAuthRepository_SetOTPRegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_SetOTPRegisterUser_Call) Return(_a0 error) *MockIAuthRepository_SetOTPRegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_SetOTPRegisterUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIAuthRepository_SetOTPRegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetOTPResetPassword provides a mock function with given fields: ctx, email, otp
func (_m *MockIAuthRepository) SetOTPResetPassword(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	if len(ret) == 0 {
		panic("no return value specified for SetOTPResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_SetOTPResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOTPResetPassword'
type MockIAuthRepository_SetOTPResetPassword_Call struct {
	*mock.Call
}

// SetOTPResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - otp string
func (_e *MockIAuthRepository_Expecter) SetOTPResetPassword(ctx interface{}, email interface{}, otp interface{}) *MockIAuthRepository_SetOTPResetPassword_Call {
	return &MockIAuthRepository_SetOTPResetPassword_Call{Call: _e.mock.On("SetOTPResetPassword", ctx, email, otp)}
}

func (_c *MockIAuthRepository_SetOTPResetPassword_Call) Run(run func(ctx context.Context, email string, otp string)) *MockIAuthRepository_SetOTPResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_SetOTPResetPassword_Call) Return(_a0 error) *MockIAuthRepository_SetOTPResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_SetOTPResetPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIAuthRepository_SetOTPResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthRepository creates a new instance of MockIAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthRepository {
	mock := &MockIAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
