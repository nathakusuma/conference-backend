// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/nathakusuma/astungkara/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockIAuthRepository is an autogenerated mock type for the IAuthRepository type
type MockIAuthRepository struct {
	mock.Mock
}

type MockIAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthRepository) EXPECT() *MockIAuthRepository_Expecter {
	return &MockIAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *MockIAuthRepository) CreateSession(ctx context.Context, session *entity.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockIAuthRepository_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *entity.Session
func (_e *MockIAuthRepository_Expecter) CreateSession(ctx interface{}, session interface{}) *MockIAuthRepository_CreateSession_Call {
	return &MockIAuthRepository_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, session)}
}

func (_c *MockIAuthRepository_CreateSession_Call) Run(run func(ctx context.Context, session *entity.Session)) *MockIAuthRepository_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Session))
	})
	return _c
}

func (_c *MockIAuthRepository_CreateSession_Call) Return(_a0 error) *MockIAuthRepository_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_CreateSession_Call) RunAndReturn(run func(context.Context, *entity.Session) error) *MockIAuthRepository_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRegisterOTP provides a mock function with given fields: ctx, email
func (_m *MockIAuthRepository) GetUserRegisterOTP(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRegisterOTP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_GetUserRegisterOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRegisterOTP'
type MockIAuthRepository_GetUserRegisterOTP_Call struct {
	*mock.Call
}

// GetUserRegisterOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthRepository_Expecter) GetUserRegisterOTP(ctx interface{}, email interface{}) *MockIAuthRepository_GetUserRegisterOTP_Call {
	return &MockIAuthRepository_GetUserRegisterOTP_Call{Call: _e.mock.On("GetUserRegisterOTP", ctx, email)}
}

func (_c *MockIAuthRepository_GetUserRegisterOTP_Call) Run(run func(ctx context.Context, email string)) *MockIAuthRepository_GetUserRegisterOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_GetUserRegisterOTP_Call) Return(_a0 string, _a1 error) *MockIAuthRepository_GetUserRegisterOTP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetUserRegisterOTP_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockIAuthRepository_GetUserRegisterOTP_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserRegisterOTP provides a mock function with given fields: ctx, email, otp
func (_m *MockIAuthRepository) SetUserRegisterOTP(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	if len(ret) == 0 {
		panic("no return value specified for SetUserRegisterOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepository_SetUserRegisterOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserRegisterOTP'
type MockIAuthRepository_SetUserRegisterOTP_Call struct {
	*mock.Call
}

// SetUserRegisterOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - otp string
func (_e *MockIAuthRepository_Expecter) SetUserRegisterOTP(ctx interface{}, email interface{}, otp interface{}) *MockIAuthRepository_SetUserRegisterOTP_Call {
	return &MockIAuthRepository_SetUserRegisterOTP_Call{Call: _e.mock.On("SetUserRegisterOTP", ctx, email, otp)}
}

func (_c *MockIAuthRepository_SetUserRegisterOTP_Call) Run(run func(ctx context.Context, email string, otp string)) *MockIAuthRepository_SetUserRegisterOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_SetUserRegisterOTP_Call) Return(_a0 error) *MockIAuthRepository_SetUserRegisterOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepository_SetUserRegisterOTP_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIAuthRepository_SetUserRegisterOTP_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthRepository creates a new instance of MockIAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthRepository {
	mock := &MockIAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
