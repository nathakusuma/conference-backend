// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// RequestOTPRegisterUser provides a mock function with given fields: ctx, email
func (_m *MockIAuthService) RequestOTPRegisterUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for RequestOTPRegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthService_RequestOTPRegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestOTPRegisterUser'
type MockIAuthService_RequestOTPRegisterUser_Call struct {
	*mock.Call
}

// RequestOTPRegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthService_Expecter) RequestOTPRegisterUser(ctx interface{}, email interface{}) *MockIAuthService_RequestOTPRegisterUser_Call {
	return &MockIAuthService_RequestOTPRegisterUser_Call{Call: _e.mock.On("RequestOTPRegisterUser", ctx, email)}
}

func (_c *MockIAuthService_RequestOTPRegisterUser_Call) Run(run func(ctx context.Context, email string)) *MockIAuthService_RequestOTPRegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthService_RequestOTPRegisterUser_Call) Return(_a0 error) *MockIAuthService_RequestOTPRegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthService_RequestOTPRegisterUser_Call) RunAndReturn(run func(context.Context, string) error) *MockIAuthService_RequestOTPRegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
