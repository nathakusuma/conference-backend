// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/astungkara/domain/dto"

	entity "github.com/nathakusuma/astungkara/domain/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockIConferenceRepository is an autogenerated mock type for the IConferenceRepository type
type MockIConferenceRepository struct {
	mock.Mock
}

type MockIConferenceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIConferenceRepository) EXPECT() *MockIConferenceRepository_Expecter {
	return &MockIConferenceRepository_Expecter{mock: &_m.Mock}
}

// CreateConference provides a mock function with given fields: ctx, conference
func (_m *MockIConferenceRepository) CreateConference(ctx context.Context, conference *entity.Conference) error {
	ret := _m.Called(ctx, conference)

	if len(ret) == 0 {
		panic("no return value specified for CreateConference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Conference) error); ok {
		r0 = rf(ctx, conference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIConferenceRepository_CreateConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConference'
type MockIConferenceRepository_CreateConference_Call struct {
	*mock.Call
}

// CreateConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conference *entity.Conference
func (_e *MockIConferenceRepository_Expecter) CreateConference(ctx interface{}, conference interface{}) *MockIConferenceRepository_CreateConference_Call {
	return &MockIConferenceRepository_CreateConference_Call{Call: _e.mock.On("CreateConference", ctx, conference)}
}

func (_c *MockIConferenceRepository_CreateConference_Call) Run(run func(ctx context.Context, conference *entity.Conference)) *MockIConferenceRepository_CreateConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Conference))
	})
	return _c
}

func (_c *MockIConferenceRepository_CreateConference_Call) Return(_a0 error) *MockIConferenceRepository_CreateConference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIConferenceRepository_CreateConference_Call) RunAndReturn(run func(context.Context, *entity.Conference) error) *MockIConferenceRepository_CreateConference_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConference provides a mock function with given fields: ctx, id
func (_m *MockIConferenceRepository) DeleteConference(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIConferenceRepository_DeleteConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConference'
type MockIConferenceRepository_DeleteConference_Call struct {
	*mock.Call
}

// DeleteConference is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIConferenceRepository_Expecter) DeleteConference(ctx interface{}, id interface{}) *MockIConferenceRepository_DeleteConference_Call {
	return &MockIConferenceRepository_DeleteConference_Call{Call: _e.mock.On("DeleteConference", ctx, id)}
}

func (_c *MockIConferenceRepository_DeleteConference_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIConferenceRepository_DeleteConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIConferenceRepository_DeleteConference_Call) Return(_a0 error) *MockIConferenceRepository_DeleteConference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIConferenceRepository_DeleteConference_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIConferenceRepository_DeleteConference_Call {
	_c.Call.Return(run)
	return _c
}

// GetConferenceByID provides a mock function with given fields: ctx, id
func (_m *MockIConferenceRepository) GetConferenceByID(ctx context.Context, id uuid.UUID) (*entity.Conference, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConferenceByID")
	}

	var r0 *entity.Conference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Conference, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Conference); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Conference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIConferenceRepository_GetConferenceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConferenceByID'
type MockIConferenceRepository_GetConferenceByID_Call struct {
	*mock.Call
}

// GetConferenceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIConferenceRepository_Expecter) GetConferenceByID(ctx interface{}, id interface{}) *MockIConferenceRepository_GetConferenceByID_Call {
	return &MockIConferenceRepository_GetConferenceByID_Call{Call: _e.mock.On("GetConferenceByID", ctx, id)}
}

func (_c *MockIConferenceRepository_GetConferenceByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIConferenceRepository_GetConferenceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIConferenceRepository_GetConferenceByID_Call) Return(_a0 *entity.Conference, _a1 error) *MockIConferenceRepository_GetConferenceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIConferenceRepository_GetConferenceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.Conference, error)) *MockIConferenceRepository_GetConferenceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetConferences provides a mock function with given fields: ctx, query
func (_m *MockIConferenceRepository) GetConferences(ctx context.Context, query *dto.GetConferenceQuery) ([]entity.Conference, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetConferences")
	}

	var r0 []entity.Conference
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetConferenceQuery) ([]entity.Conference, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetConferenceQuery) []entity.Conference); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Conference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetConferenceQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.GetConferenceQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIConferenceRepository_GetConferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConferences'
type MockIConferenceRepository_GetConferences_Call struct {
	*mock.Call
}

// GetConferences is a helper method to define mock.On call
//   - ctx context.Context
//   - query *dto.GetConferenceQuery
func (_e *MockIConferenceRepository_Expecter) GetConferences(ctx interface{}, query interface{}) *MockIConferenceRepository_GetConferences_Call {
	return &MockIConferenceRepository_GetConferences_Call{Call: _e.mock.On("GetConferences", ctx, query)}
}

func (_c *MockIConferenceRepository_GetConferences_Call) Run(run func(ctx context.Context, query *dto.GetConferenceQuery)) *MockIConferenceRepository_GetConferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GetConferenceQuery))
	})
	return _c
}

func (_c *MockIConferenceRepository_GetConferences_Call) Return(_a0 []entity.Conference, _a1 dto.LazyLoadResponse, _a2 error) *MockIConferenceRepository_GetConferences_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIConferenceRepository_GetConferences_Call) RunAndReturn(run func(context.Context, *dto.GetConferenceQuery) ([]entity.Conference, dto.LazyLoadResponse, error)) *MockIConferenceRepository_GetConferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetConferencesConflictingWithTime provides a mock function with given fields: ctx, startsAt, endsAt, excludeID
func (_m *MockIConferenceRepository) GetConferencesConflictingWithTime(ctx context.Context, startsAt time.Time, endsAt time.Time, excludeID uuid.UUID) ([]entity.Conference, error) {
	ret := _m.Called(ctx, startsAt, endsAt, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for GetConferencesConflictingWithTime")
	}

	var r0 []entity.Conference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, uuid.UUID) ([]entity.Conference, error)); ok {
		return rf(ctx, startsAt, endsAt, excludeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, uuid.UUID) []entity.Conference); ok {
		r0 = rf(ctx, startsAt, endsAt, excludeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Conference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, uuid.UUID) error); ok {
		r1 = rf(ctx, startsAt, endsAt, excludeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIConferenceRepository_GetConferencesConflictingWithTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConferencesConflictingWithTime'
type MockIConferenceRepository_GetConferencesConflictingWithTime_Call struct {
	*mock.Call
}

// GetConferencesConflictingWithTime is a helper method to define mock.On call
//   - ctx context.Context
//   - startsAt time.Time
//   - endsAt time.Time
//   - excludeID uuid.UUID
func (_e *MockIConferenceRepository_Expecter) GetConferencesConflictingWithTime(ctx interface{}, startsAt interface{}, endsAt interface{}, excludeID interface{}) *MockIConferenceRepository_GetConferencesConflictingWithTime_Call {
	return &MockIConferenceRepository_GetConferencesConflictingWithTime_Call{Call: _e.mock.On("GetConferencesConflictingWithTime", ctx, startsAt, endsAt, excludeID)}
}

func (_c *MockIConferenceRepository_GetConferencesConflictingWithTime_Call) Run(run func(ctx context.Context, startsAt time.Time, endsAt time.Time, excludeID uuid.UUID)) *MockIConferenceRepository_GetConferencesConflictingWithTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockIConferenceRepository_GetConferencesConflictingWithTime_Call) Return(_a0 []entity.Conference, _a1 error) *MockIConferenceRepository_GetConferencesConflictingWithTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIConferenceRepository_GetConferencesConflictingWithTime_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, uuid.UUID) ([]entity.Conference, error)) *MockIConferenceRepository_GetConferencesConflictingWithTime_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConference provides a mock function with given fields: ctx, conference
func (_m *MockIConferenceRepository) UpdateConference(ctx context.Context, conference *entity.Conference) error {
	ret := _m.Called(ctx, conference)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Conference) error); ok {
		r0 = rf(ctx, conference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIConferenceRepository_UpdateConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConference'
type MockIConferenceRepository_UpdateConference_Call struct {
	*mock.Call
}

// UpdateConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conference *entity.Conference
func (_e *MockIConferenceRepository_Expecter) UpdateConference(ctx interface{}, conference interface{}) *MockIConferenceRepository_UpdateConference_Call {
	return &MockIConferenceRepository_UpdateConference_Call{Call: _e.mock.On("UpdateConference", ctx, conference)}
}

func (_c *MockIConferenceRepository_UpdateConference_Call) Run(run func(ctx context.Context, conference *entity.Conference)) *MockIConferenceRepository_UpdateConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Conference))
	})
	return _c
}

func (_c *MockIConferenceRepository_UpdateConference_Call) Return(_a0 error) *MockIConferenceRepository_UpdateConference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIConferenceRepository_UpdateConference_Call) RunAndReturn(run func(context.Context, *entity.Conference) error) *MockIConferenceRepository_UpdateConference_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIConferenceRepository creates a new instance of MockIConferenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIConferenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIConferenceRepository {
	mock := &MockIConferenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
