// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/astungkara/domain/dto"

	enum "github.com/nathakusuma/astungkara/domain/enum"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIConferenceService is an autogenerated mock type for the IConferenceService type
type MockIConferenceService struct {
	mock.Mock
}

type MockIConferenceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIConferenceService) EXPECT() *MockIConferenceService_Expecter {
	return &MockIConferenceService_Expecter{mock: &_m.Mock}
}

// CreateConferenceProposal provides a mock function with given fields: ctx, req
func (_m *MockIConferenceService) CreateConferenceProposal(ctx context.Context, req *dto.CreateConferenceProposalRequest) (uuid.UUID, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateConferenceProposal")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateConferenceProposalRequest) (uuid.UUID, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateConferenceProposalRequest) uuid.UUID); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateConferenceProposalRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIConferenceService_CreateConferenceProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConferenceProposal'
type MockIConferenceService_CreateConferenceProposal_Call struct {
	*mock.Call
}

// CreateConferenceProposal is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateConferenceProposalRequest
func (_e *MockIConferenceService_Expecter) CreateConferenceProposal(ctx interface{}, req interface{}) *MockIConferenceService_CreateConferenceProposal_Call {
	return &MockIConferenceService_CreateConferenceProposal_Call{Call: _e.mock.On("CreateConferenceProposal", ctx, req)}
}

func (_c *MockIConferenceService_CreateConferenceProposal_Call) Run(run func(ctx context.Context, req *dto.CreateConferenceProposalRequest)) *MockIConferenceService_CreateConferenceProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateConferenceProposalRequest))
	})
	return _c
}

func (_c *MockIConferenceService_CreateConferenceProposal_Call) Return(_a0 uuid.UUID, _a1 error) *MockIConferenceService_CreateConferenceProposal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIConferenceService_CreateConferenceProposal_Call) RunAndReturn(run func(context.Context, *dto.CreateConferenceProposalRequest) (uuid.UUID, error)) *MockIConferenceService_CreateConferenceProposal_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConference provides a mock function with given fields: ctx, id
func (_m *MockIConferenceService) DeleteConference(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIConferenceService_DeleteConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConference'
type MockIConferenceService_DeleteConference_Call struct {
	*mock.Call
}

// DeleteConference is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIConferenceService_Expecter) DeleteConference(ctx interface{}, id interface{}) *MockIConferenceService_DeleteConference_Call {
	return &MockIConferenceService_DeleteConference_Call{Call: _e.mock.On("DeleteConference", ctx, id)}
}

func (_c *MockIConferenceService_DeleteConference_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIConferenceService_DeleteConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIConferenceService_DeleteConference_Call) Return(_a0 error) *MockIConferenceService_DeleteConference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIConferenceService_DeleteConference_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIConferenceService_DeleteConference_Call {
	_c.Call.Return(run)
	return _c
}

// GetConferenceByID provides a mock function with given fields: ctx, id
func (_m *MockIConferenceService) GetConferenceByID(ctx context.Context, id uuid.UUID) (*dto.ConferenceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConferenceByID")
	}

	var r0 *dto.ConferenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.ConferenceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.ConferenceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ConferenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIConferenceService_GetConferenceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConferenceByID'
type MockIConferenceService_GetConferenceByID_Call struct {
	*mock.Call
}

// GetConferenceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIConferenceService_Expecter) GetConferenceByID(ctx interface{}, id interface{}) *MockIConferenceService_GetConferenceByID_Call {
	return &MockIConferenceService_GetConferenceByID_Call{Call: _e.mock.On("GetConferenceByID", ctx, id)}
}

func (_c *MockIConferenceService_GetConferenceByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIConferenceService_GetConferenceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIConferenceService_GetConferenceByID_Call) Return(_a0 *dto.ConferenceResponse, _a1 error) *MockIConferenceService_GetConferenceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIConferenceService_GetConferenceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dto.ConferenceResponse, error)) *MockIConferenceService_GetConferenceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetConferences provides a mock function with given fields: ctx, query
func (_m *MockIConferenceService) GetConferences(ctx context.Context, query *dto.GetConferenceQuery) ([]dto.ConferenceResponse, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetConferences")
	}

	var r0 []dto.ConferenceResponse
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetConferenceQuery) ([]dto.ConferenceResponse, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetConferenceQuery) []dto.ConferenceResponse); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ConferenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetConferenceQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.GetConferenceQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIConferenceService_GetConferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConferences'
type MockIConferenceService_GetConferences_Call struct {
	*mock.Call
}

// GetConferences is a helper method to define mock.On call
//   - ctx context.Context
//   - query *dto.GetConferenceQuery
func (_e *MockIConferenceService_Expecter) GetConferences(ctx interface{}, query interface{}) *MockIConferenceService_GetConferences_Call {
	return &MockIConferenceService_GetConferences_Call{Call: _e.mock.On("GetConferences", ctx, query)}
}

func (_c *MockIConferenceService_GetConferences_Call) Run(run func(ctx context.Context, query *dto.GetConferenceQuery)) *MockIConferenceService_GetConferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.GetConferenceQuery))
	})
	return _c
}

func (_c *MockIConferenceService_GetConferences_Call) Return(_a0 []dto.ConferenceResponse, _a1 dto.LazyLoadResponse, _a2 error) *MockIConferenceService_GetConferences_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIConferenceService_GetConferences_Call) RunAndReturn(run func(context.Context, *dto.GetConferenceQuery) ([]dto.ConferenceResponse, dto.LazyLoadResponse, error)) *MockIConferenceService_GetConferences_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConference provides a mock function with given fields: ctx, id, req
func (_m *MockIConferenceService) UpdateConference(ctx context.Context, id uuid.UUID, req dto.UpdateConferenceRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdateConferenceRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIConferenceService_UpdateConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConference'
type MockIConferenceService_UpdateConference_Call struct {
	*mock.Call
}

// UpdateConference is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - req dto.UpdateConferenceRequest
func (_e *MockIConferenceService_Expecter) UpdateConference(ctx interface{}, id interface{}, req interface{}) *MockIConferenceService_UpdateConference_Call {
	return &MockIConferenceService_UpdateConference_Call{Call: _e.mock.On("UpdateConference", ctx, id, req)}
}

func (_c *MockIConferenceService_UpdateConference_Call) Run(run func(ctx context.Context, id uuid.UUID, req dto.UpdateConferenceRequest)) *MockIConferenceService_UpdateConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.UpdateConferenceRequest))
	})
	return _c
}

func (_c *MockIConferenceService_UpdateConference_Call) Return(_a0 error) *MockIConferenceService_UpdateConference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIConferenceService_UpdateConference_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.UpdateConferenceRequest) error) *MockIConferenceService_UpdateConference_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConferenceStatus provides a mock function with given fields: ctx, id, status
func (_m *MockIConferenceService) UpdateConferenceStatus(ctx context.Context, id uuid.UUID, status enum.ConferenceStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConferenceStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, enum.ConferenceStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIConferenceService_UpdateConferenceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConferenceStatus'
type MockIConferenceService_UpdateConferenceStatus_Call struct {
	*mock.Call
}

// UpdateConferenceStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - status enum.ConferenceStatus
func (_e *MockIConferenceService_Expecter) UpdateConferenceStatus(ctx interface{}, id interface{}, status interface{}) *MockIConferenceService_UpdateConferenceStatus_Call {
	return &MockIConferenceService_UpdateConferenceStatus_Call{Call: _e.mock.On("UpdateConferenceStatus", ctx, id, status)}
}

func (_c *MockIConferenceService_UpdateConferenceStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status enum.ConferenceStatus)) *MockIConferenceService_UpdateConferenceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(enum.ConferenceStatus))
	})
	return _c
}

func (_c *MockIConferenceService_UpdateConferenceStatus_Call) Return(_a0 error) *MockIConferenceService_UpdateConferenceStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIConferenceService_UpdateConferenceStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, enum.ConferenceStatus) error) *MockIConferenceService_UpdateConferenceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIConferenceService creates a new instance of MockIConferenceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIConferenceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIConferenceService {
	mock := &MockIConferenceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
