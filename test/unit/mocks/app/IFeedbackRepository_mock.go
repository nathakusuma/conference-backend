// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/astungkara/domain/dto"

	entity "github.com/nathakusuma/astungkara/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIFeedbackRepository is an autogenerated mock type for the IFeedbackRepository type
type MockIFeedbackRepository struct {
	mock.Mock
}

type MockIFeedbackRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIFeedbackRepository) EXPECT() *MockIFeedbackRepository_Expecter {
	return &MockIFeedbackRepository_Expecter{mock: &_m.Mock}
}

// CreateFeedback provides a mock function with given fields: ctx, feedback
func (_m *MockIFeedbackRepository) CreateFeedback(ctx context.Context, feedback *entity.Feedback) error {
	ret := _m.Called(ctx, feedback)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Feedback) error); ok {
		r0 = rf(ctx, feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIFeedbackRepository_CreateFeedback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeedback'
type MockIFeedbackRepository_CreateFeedback_Call struct {
	*mock.Call
}

// CreateFeedback is a helper method to define mock.On call
//   - ctx context.Context
//   - feedback *entity.Feedback
func (_e *MockIFeedbackRepository_Expecter) CreateFeedback(ctx interface{}, feedback interface{}) *MockIFeedbackRepository_CreateFeedback_Call {
	return &MockIFeedbackRepository_CreateFeedback_Call{Call: _e.mock.On("CreateFeedback", ctx, feedback)}
}

func (_c *MockIFeedbackRepository_CreateFeedback_Call) Run(run func(ctx context.Context, feedback *entity.Feedback)) *MockIFeedbackRepository_CreateFeedback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Feedback))
	})
	return _c
}

func (_c *MockIFeedbackRepository_CreateFeedback_Call) Return(_a0 error) *MockIFeedbackRepository_CreateFeedback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIFeedbackRepository_CreateFeedback_Call) RunAndReturn(run func(context.Context, *entity.Feedback) error) *MockIFeedbackRepository_CreateFeedback_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeedback provides a mock function with given fields: ctx, id
func (_m *MockIFeedbackRepository) DeleteFeedback(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIFeedbackRepository_DeleteFeedback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeedback'
type MockIFeedbackRepository_DeleteFeedback_Call struct {
	*mock.Call
}

// DeleteFeedback is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIFeedbackRepository_Expecter) DeleteFeedback(ctx interface{}, id interface{}) *MockIFeedbackRepository_DeleteFeedback_Call {
	return &MockIFeedbackRepository_DeleteFeedback_Call{Call: _e.mock.On("DeleteFeedback", ctx, id)}
}

func (_c *MockIFeedbackRepository_DeleteFeedback_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIFeedbackRepository_DeleteFeedback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIFeedbackRepository_DeleteFeedback_Call) Return(_a0 error) *MockIFeedbackRepository_DeleteFeedback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIFeedbackRepository_DeleteFeedback_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIFeedbackRepository_DeleteFeedback_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeedbacksByConferenceID provides a mock function with given fields: ctx, conferenceID, lazyReq
func (_m *MockIFeedbackRepository) GetFeedbacksByConferenceID(ctx context.Context, conferenceID uuid.UUID, lazyReq dto.LazyLoadQuery) ([]entity.Feedback, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, conferenceID, lazyReq)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedbacksByConferenceID")
	}

	var r0 []entity.Feedback
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) ([]entity.Feedback, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, conferenceID, lazyReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) []entity.Feedback); ok {
		r0 = rf(ctx, conferenceID, lazyReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, conferenceID, lazyReq)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) error); ok {
		r2 = rf(ctx, conferenceID, lazyReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIFeedbackRepository_GetFeedbacksByConferenceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeedbacksByConferenceID'
type MockIFeedbackRepository_GetFeedbacksByConferenceID_Call struct {
	*mock.Call
}

// GetFeedbacksByConferenceID is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
//   - lazyReq dto.LazyLoadQuery
func (_e *MockIFeedbackRepository_Expecter) GetFeedbacksByConferenceID(ctx interface{}, conferenceID interface{}, lazyReq interface{}) *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call {
	return &MockIFeedbackRepository_GetFeedbacksByConferenceID_Call{Call: _e.mock.On("GetFeedbacksByConferenceID", ctx, conferenceID, lazyReq)}
}

func (_c *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID, lazyReq dto.LazyLoadQuery)) *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.LazyLoadQuery))
	})
	return _c
}

func (_c *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call) Return(_a0 []entity.Feedback, _a1 dto.LazyLoadResponse, _a2 error) *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.LazyLoadQuery) ([]entity.Feedback, dto.LazyLoadResponse, error)) *MockIFeedbackRepository_GetFeedbacksByConferenceID_Call {
	_c.Call.Return(run)
	return _c
}

// IsFeedbackGiven provides a mock function with given fields: ctx, userID, conferenceID
func (_m *MockIFeedbackRepository) IsFeedbackGiven(ctx context.Context, userID uuid.UUID, conferenceID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, userID, conferenceID)

	if len(ret) == 0 {
		panic("no return value specified for IsFeedbackGiven")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, userID, conferenceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID, conferenceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, conferenceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFeedbackRepository_IsFeedbackGiven_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFeedbackGiven'
type MockIFeedbackRepository_IsFeedbackGiven_Call struct {
	*mock.Call
}

// IsFeedbackGiven is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - conferenceID uuid.UUID
func (_e *MockIFeedbackRepository_Expecter) IsFeedbackGiven(ctx interface{}, userID interface{}, conferenceID interface{}) *MockIFeedbackRepository_IsFeedbackGiven_Call {
	return &MockIFeedbackRepository_IsFeedbackGiven_Call{Call: _e.mock.On("IsFeedbackGiven", ctx, userID, conferenceID)}
}

func (_c *MockIFeedbackRepository_IsFeedbackGiven_Call) Run(run func(ctx context.Context, userID uuid.UUID, conferenceID uuid.UUID)) *MockIFeedbackRepository_IsFeedbackGiven_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockIFeedbackRepository_IsFeedbackGiven_Call) Return(_a0 bool, _a1 error) *MockIFeedbackRepository_IsFeedbackGiven_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFeedbackRepository_IsFeedbackGiven_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockIFeedbackRepository_IsFeedbackGiven_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIFeedbackRepository creates a new instance of MockIFeedbackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIFeedbackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIFeedbackRepository {
	mock := &MockIFeedbackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
