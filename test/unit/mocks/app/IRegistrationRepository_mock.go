// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/astungkara/domain/dto"

	entity "github.com/nathakusuma/astungkara/domain/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockIRegistrationRepository is an autogenerated mock type for the IRegistrationRepository type
type MockIRegistrationRepository struct {
	mock.Mock
}

type MockIRegistrationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRegistrationRepository) EXPECT() *MockIRegistrationRepository_Expecter {
	return &MockIRegistrationRepository_Expecter{mock: &_m.Mock}
}

// CountRegistrationsByConference provides a mock function with given fields: ctx, conferenceID
func (_m *MockIRegistrationRepository) CountRegistrationsByConference(ctx context.Context, conferenceID uuid.UUID) (int, error) {
	ret := _m.Called(ctx, conferenceID)

	if len(ret) == 0 {
		panic("no return value specified for CountRegistrationsByConference")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return rf(ctx, conferenceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, conferenceID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, conferenceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistrationRepository_CountRegistrationsByConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRegistrationsByConference'
type MockIRegistrationRepository_CountRegistrationsByConference_Call struct {
	*mock.Call
}

// CountRegistrationsByConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
func (_e *MockIRegistrationRepository_Expecter) CountRegistrationsByConference(ctx interface{}, conferenceID interface{}) *MockIRegistrationRepository_CountRegistrationsByConference_Call {
	return &MockIRegistrationRepository_CountRegistrationsByConference_Call{Call: _e.mock.On("CountRegistrationsByConference", ctx, conferenceID)}
}

func (_c *MockIRegistrationRepository_CountRegistrationsByConference_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID)) *MockIRegistrationRepository_CountRegistrationsByConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIRegistrationRepository_CountRegistrationsByConference_Call) Return(_a0 int, _a1 error) *MockIRegistrationRepository_CountRegistrationsByConference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistrationRepository_CountRegistrationsByConference_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int, error)) *MockIRegistrationRepository_CountRegistrationsByConference_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRegistration provides a mock function with given fields: ctx, registration
func (_m *MockIRegistrationRepository) CreateRegistration(ctx context.Context, registration *entity.Registration) error {
	ret := _m.Called(ctx, registration)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Registration) error); ok {
		r0 = rf(ctx, registration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRegistrationRepository_CreateRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRegistration'
type MockIRegistrationRepository_CreateRegistration_Call struct {
	*mock.Call
}

// CreateRegistration is a helper method to define mock.On call
//   - ctx context.Context
//   - registration *entity.Registration
func (_e *MockIRegistrationRepository_Expecter) CreateRegistration(ctx interface{}, registration interface{}) *MockIRegistrationRepository_CreateRegistration_Call {
	return &MockIRegistrationRepository_CreateRegistration_Call{Call: _e.mock.On("CreateRegistration", ctx, registration)}
}

func (_c *MockIRegistrationRepository_CreateRegistration_Call) Run(run func(ctx context.Context, registration *entity.Registration)) *MockIRegistrationRepository_CreateRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Registration))
	})
	return _c
}

func (_c *MockIRegistrationRepository_CreateRegistration_Call) Return(_a0 error) *MockIRegistrationRepository_CreateRegistration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRegistrationRepository_CreateRegistration_Call) RunAndReturn(run func(context.Context, *entity.Registration) error) *MockIRegistrationRepository_CreateRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConflictingRegistrations provides a mock function with given fields: ctx, userID, startsAt, endsAt
func (_m *MockIRegistrationRepository) GetConflictingRegistrations(ctx context.Context, userID uuid.UUID, startsAt time.Time, endsAt time.Time) ([]entity.Conference, error) {
	ret := _m.Called(ctx, userID, startsAt, endsAt)

	if len(ret) == 0 {
		panic("no return value specified for GetConflictingRegistrations")
	}

	var r0 []entity.Conference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) ([]entity.Conference, error)); ok {
		return rf(ctx, userID, startsAt, endsAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) []entity.Conference); ok {
		r0 = rf(ctx, userID, startsAt, endsAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Conference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, startsAt, endsAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistrationRepository_GetConflictingRegistrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConflictingRegistrations'
type MockIRegistrationRepository_GetConflictingRegistrations_Call struct {
	*mock.Call
}

// GetConflictingRegistrations is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - startsAt time.Time
//   - endsAt time.Time
func (_e *MockIRegistrationRepository_Expecter) GetConflictingRegistrations(ctx interface{}, userID interface{}, startsAt interface{}, endsAt interface{}) *MockIRegistrationRepository_GetConflictingRegistrations_Call {
	return &MockIRegistrationRepository_GetConflictingRegistrations_Call{Call: _e.mock.On("GetConflictingRegistrations", ctx, userID, startsAt, endsAt)}
}

func (_c *MockIRegistrationRepository_GetConflictingRegistrations_Call) Run(run func(ctx context.Context, userID uuid.UUID, startsAt time.Time, endsAt time.Time)) *MockIRegistrationRepository_GetConflictingRegistrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockIRegistrationRepository_GetConflictingRegistrations_Call) Return(_a0 []entity.Conference, _a1 error) *MockIRegistrationRepository_GetConflictingRegistrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistrationRepository_GetConflictingRegistrations_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time, time.Time) ([]entity.Conference, error)) *MockIRegistrationRepository_GetConflictingRegistrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisteredConferencesByUser provides a mock function with given fields: ctx, userID, includePast, lazyReq
func (_m *MockIRegistrationRepository) GetRegisteredConferencesByUser(ctx context.Context, userID uuid.UUID, includePast bool, lazyReq dto.LazyLoadQuery) ([]entity.Conference, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, userID, includePast, lazyReq)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredConferencesByUser")
	}

	var r0 []entity.Conference
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) ([]entity.Conference, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, userID, includePast, lazyReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) []entity.Conference); ok {
		r0 = rf(ctx, userID, includePast, lazyReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Conference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, userID, includePast, lazyReq)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) error); ok {
		r2 = rf(ctx, userID, includePast, lazyReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIRegistrationRepository_GetRegisteredConferencesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredConferencesByUser'
type MockIRegistrationRepository_GetRegisteredConferencesByUser_Call struct {
	*mock.Call
}

// GetRegisteredConferencesByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - includePast bool
//   - lazyReq dto.LazyLoadQuery
func (_e *MockIRegistrationRepository_Expecter) GetRegisteredConferencesByUser(ctx interface{}, userID interface{}, includePast interface{}, lazyReq interface{}) *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call {
	return &MockIRegistrationRepository_GetRegisteredConferencesByUser_Call{Call: _e.mock.On("GetRegisteredConferencesByUser", ctx, userID, includePast, lazyReq)}
}

func (_c *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, includePast bool, lazyReq dto.LazyLoadQuery)) *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool), args[3].(dto.LazyLoadQuery))
	})
	return _c
}

func (_c *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call) Return(_a0 []entity.Conference, _a1 dto.LazyLoadResponse, _a2 error) *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) ([]entity.Conference, dto.LazyLoadResponse, error)) *MockIRegistrationRepository_GetRegisteredConferencesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisteredUsersByConference provides a mock function with given fields: ctx, conferenceID, lazyReq
func (_m *MockIRegistrationRepository) GetRegisteredUsersByConference(ctx context.Context, conferenceID uuid.UUID, lazyReq dto.LazyLoadQuery) ([]entity.User, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, conferenceID, lazyReq)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredUsersByConference")
	}

	var r0 []entity.User
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) ([]entity.User, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, conferenceID, lazyReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) []entity.User); ok {
		r0 = rf(ctx, conferenceID, lazyReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, conferenceID, lazyReq)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) error); ok {
		r2 = rf(ctx, conferenceID, lazyReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIRegistrationRepository_GetRegisteredUsersByConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredUsersByConference'
type MockIRegistrationRepository_GetRegisteredUsersByConference_Call struct {
	*mock.Call
}

// GetRegisteredUsersByConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
//   - lazyReq dto.LazyLoadQuery
func (_e *MockIRegistrationRepository_Expecter) GetRegisteredUsersByConference(ctx interface{}, conferenceID interface{}, lazyReq interface{}) *MockIRegistrationRepository_GetRegisteredUsersByConference_Call {
	return &MockIRegistrationRepository_GetRegisteredUsersByConference_Call{Call: _e.mock.On("GetRegisteredUsersByConference", ctx, conferenceID, lazyReq)}
}

func (_c *MockIRegistrationRepository_GetRegisteredUsersByConference_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID, lazyReq dto.LazyLoadQuery)) *MockIRegistrationRepository_GetRegisteredUsersByConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.LazyLoadQuery))
	})
	return _c
}

func (_c *MockIRegistrationRepository_GetRegisteredUsersByConference_Call) Return(_a0 []entity.User, _a1 dto.LazyLoadResponse, _a2 error) *MockIRegistrationRepository_GetRegisteredUsersByConference_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIRegistrationRepository_GetRegisteredUsersByConference_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.LazyLoadQuery) ([]entity.User, dto.LazyLoadResponse, error)) *MockIRegistrationRepository_GetRegisteredUsersByConference_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserRegisteredToConference provides a mock function with given fields: ctx, conferenceID, userID
func (_m *MockIRegistrationRepository) IsUserRegisteredToConference(ctx context.Context, conferenceID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, conferenceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserRegisteredToConference")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, conferenceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, conferenceID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, conferenceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistrationRepository_IsUserRegisteredToConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserRegisteredToConference'
type MockIRegistrationRepository_IsUserRegisteredToConference_Call struct {
	*mock.Call
}

// IsUserRegisteredToConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
//   - userID uuid.UUID
func (_e *MockIRegistrationRepository_Expecter) IsUserRegisteredToConference(ctx interface{}, conferenceID interface{}, userID interface{}) *MockIRegistrationRepository_IsUserRegisteredToConference_Call {
	return &MockIRegistrationRepository_IsUserRegisteredToConference_Call{Call: _e.mock.On("IsUserRegisteredToConference", ctx, conferenceID, userID)}
}

func (_c *MockIRegistrationRepository_IsUserRegisteredToConference_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID, userID uuid.UUID)) *MockIRegistrationRepository_IsUserRegisteredToConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockIRegistrationRepository_IsUserRegisteredToConference_Call) Return(_a0 bool, _a1 error) *MockIRegistrationRepository_IsUserRegisteredToConference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistrationRepository_IsUserRegisteredToConference_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockIRegistrationRepository_IsUserRegisteredToConference_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRegistrationRepository creates a new instance of MockIRegistrationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRegistrationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRegistrationRepository {
	mock := &MockIRegistrationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
