// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/astungkara/domain/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIRegistrationService is an autogenerated mock type for the IRegistrationService type
type MockIRegistrationService struct {
	mock.Mock
}

type MockIRegistrationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRegistrationService) EXPECT() *MockIRegistrationService_Expecter {
	return &MockIRegistrationService_Expecter{mock: &_m.Mock}
}

// GetRegisteredConferencesByUser provides a mock function with given fields: ctx, userID, includePast, lazyReq
func (_m *MockIRegistrationService) GetRegisteredConferencesByUser(ctx context.Context, userID uuid.UUID, includePast bool, lazyReq dto.LazyLoadQuery) ([]dto.ConferenceResponse, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, userID, includePast, lazyReq)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredConferencesByUser")
	}

	var r0 []dto.ConferenceResponse
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) ([]dto.ConferenceResponse, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, userID, includePast, lazyReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) []dto.ConferenceResponse); ok {
		r0 = rf(ctx, userID, includePast, lazyReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ConferenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, userID, includePast, lazyReq)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) error); ok {
		r2 = rf(ctx, userID, includePast, lazyReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIRegistrationService_GetRegisteredConferencesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredConferencesByUser'
type MockIRegistrationService_GetRegisteredConferencesByUser_Call struct {
	*mock.Call
}

// GetRegisteredConferencesByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - includePast bool
//   - lazyReq dto.LazyLoadQuery
func (_e *MockIRegistrationService_Expecter) GetRegisteredConferencesByUser(ctx interface{}, userID interface{}, includePast interface{}, lazyReq interface{}) *MockIRegistrationService_GetRegisteredConferencesByUser_Call {
	return &MockIRegistrationService_GetRegisteredConferencesByUser_Call{Call: _e.mock.On("GetRegisteredConferencesByUser", ctx, userID, includePast, lazyReq)}
}

func (_c *MockIRegistrationService_GetRegisteredConferencesByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, includePast bool, lazyReq dto.LazyLoadQuery)) *MockIRegistrationService_GetRegisteredConferencesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool), args[3].(dto.LazyLoadQuery))
	})
	return _c
}

func (_c *MockIRegistrationService_GetRegisteredConferencesByUser_Call) Return(_a0 []dto.ConferenceResponse, _a1 dto.LazyLoadResponse, _a2 error) *MockIRegistrationService_GetRegisteredConferencesByUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIRegistrationService_GetRegisteredConferencesByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, bool, dto.LazyLoadQuery) ([]dto.ConferenceResponse, dto.LazyLoadResponse, error)) *MockIRegistrationService_GetRegisteredConferencesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisteredUsersByConference provides a mock function with given fields: ctx, conferenceID, lazyReq
func (_m *MockIRegistrationService) GetRegisteredUsersByConference(ctx context.Context, conferenceID uuid.UUID, lazyReq dto.LazyLoadQuery) ([]dto.UserResponse, dto.LazyLoadResponse, error) {
	ret := _m.Called(ctx, conferenceID, lazyReq)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredUsersByConference")
	}

	var r0 []dto.UserResponse
	var r1 dto.LazyLoadResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) ([]dto.UserResponse, dto.LazyLoadResponse, error)); ok {
		return rf(ctx, conferenceID, lazyReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) []dto.UserResponse); ok {
		r0 = rf(ctx, conferenceID, lazyReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) dto.LazyLoadResponse); ok {
		r1 = rf(ctx, conferenceID, lazyReq)
	} else {
		r1 = ret.Get(1).(dto.LazyLoadResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, dto.LazyLoadQuery) error); ok {
		r2 = rf(ctx, conferenceID, lazyReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIRegistrationService_GetRegisteredUsersByConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredUsersByConference'
type MockIRegistrationService_GetRegisteredUsersByConference_Call struct {
	*mock.Call
}

// GetRegisteredUsersByConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
//   - lazyReq dto.LazyLoadQuery
func (_e *MockIRegistrationService_Expecter) GetRegisteredUsersByConference(ctx interface{}, conferenceID interface{}, lazyReq interface{}) *MockIRegistrationService_GetRegisteredUsersByConference_Call {
	return &MockIRegistrationService_GetRegisteredUsersByConference_Call{Call: _e.mock.On("GetRegisteredUsersByConference", ctx, conferenceID, lazyReq)}
}

func (_c *MockIRegistrationService_GetRegisteredUsersByConference_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID, lazyReq dto.LazyLoadQuery)) *MockIRegistrationService_GetRegisteredUsersByConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.LazyLoadQuery))
	})
	return _c
}

func (_c *MockIRegistrationService_GetRegisteredUsersByConference_Call) Return(_a0 []dto.UserResponse, _a1 dto.LazyLoadResponse, _a2 error) *MockIRegistrationService_GetRegisteredUsersByConference_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIRegistrationService_GetRegisteredUsersByConference_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.LazyLoadQuery) ([]dto.UserResponse, dto.LazyLoadResponse, error)) *MockIRegistrationService_GetRegisteredUsersByConference_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserRegisteredToConference provides a mock function with given fields: ctx, conferenceID, userID
func (_m *MockIRegistrationService) IsUserRegisteredToConference(ctx context.Context, conferenceID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, conferenceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserRegisteredToConference")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, conferenceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, conferenceID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, conferenceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistrationService_IsUserRegisteredToConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserRegisteredToConference'
type MockIRegistrationService_IsUserRegisteredToConference_Call struct {
	*mock.Call
}

// IsUserRegisteredToConference is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
//   - userID uuid.UUID
func (_e *MockIRegistrationService_Expecter) IsUserRegisteredToConference(ctx interface{}, conferenceID interface{}, userID interface{}) *MockIRegistrationService_IsUserRegisteredToConference_Call {
	return &MockIRegistrationService_IsUserRegisteredToConference_Call{Call: _e.mock.On("IsUserRegisteredToConference", ctx, conferenceID, userID)}
}

func (_c *MockIRegistrationService_IsUserRegisteredToConference_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID, userID uuid.UUID)) *MockIRegistrationService_IsUserRegisteredToConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockIRegistrationService_IsUserRegisteredToConference_Call) Return(_a0 bool, _a1 error) *MockIRegistrationService_IsUserRegisteredToConference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistrationService_IsUserRegisteredToConference_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockIRegistrationService_IsUserRegisteredToConference_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, conferenceID, userID
func (_m *MockIRegistrationService) Register(ctx context.Context, conferenceID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, conferenceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, conferenceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRegistrationService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIRegistrationService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - conferenceID uuid.UUID
//   - userID uuid.UUID
func (_e *MockIRegistrationService_Expecter) Register(ctx interface{}, conferenceID interface{}, userID interface{}) *MockIRegistrationService_Register_Call {
	return &MockIRegistrationService_Register_Call{Call: _e.mock.On("Register", ctx, conferenceID, userID)}
}

func (_c *MockIRegistrationService_Register_Call) Run(run func(ctx context.Context, conferenceID uuid.UUID, userID uuid.UUID)) *MockIRegistrationService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockIRegistrationService_Register_Call) Return(_a0 error) *MockIRegistrationService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRegistrationService_Register_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockIRegistrationService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRegistrationService creates a new instance of MockIRegistrationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRegistrationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRegistrationService {
	mock := &MockIRegistrationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
